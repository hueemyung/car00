module car (reset_n, X, clk, led0, led1, led2, led3);

input reset_n;
input X;
input clk;
output led0, led1, led2, led3;

reg led0, led1, led2, led3;

reg [2:0] state;
reg [2:0] next_state;

reg [27:0] counter;

parameter LED_ON = 1'b1 , LED_OFF = 1'b0;

parameter  S0 = 3'b000,         
           S1 = 3'b001,      
           S2 = 3'b010,            
           S3 = 3'b011,           
           S4 = 3'b100;            

always @(posedge clk or negedge reset_n) begin
    
    if(!reset_n)  begin
        state <= S0;
        counter <= 0;
    end
    else if(state == S1 || state == S2 || state == S4) begin
        if(counter == 28'b1011111010111100001000000000) begin  // Axi clk Freq = 100MHz , 2sec delay  = 200,000,000
            state <= next_state;   
            counter <= 0;
        end
        else counter <= counter +1;
    end 
    else 
        state <= next_state;    
end

always @(state) begin

    case(state)
    
    S0 : begin
        // default setting
        led0 <= LED_OFF;
        led1 <= LED_OFF;
        led2 <= LED_OFF;
        led3 <= LED_OFF;
    end
    S1 : begin
        led0 <= LED_ON;
        led1 <= LED_ON;
        led2 <= LED_OFF;
        led3 <= LED_OFF;
    end
    S2 : begin
        led0 <= LED_ON;
        led1 <= LED_ON;
        led2 <= LED_ON;
        led3 <= LED_ON;     
    end
    S3 : begin
        led0 <= LED_ON;
        led1 <= LED_ON;
        led2 <= LED_ON;
        led3 <= LED_ON;
    end
    S4 : begin
        led0 <= LED_OFF;
        led1 <= LED_OFF;
        led2 <= LED_ON;
        led3 <= LED_ON;
    end
    endcase
end    

always @(state or X) begin
    
    case (state)

    S0 : if(X)  // car_on -> next state
    next_state <= S1; 
    else 
    next_state <= S0;

    S1 : 
    next_state <= S2;

    S2 : 
    next_state <= S3;

    S3 : if(X)  // car_on -> current state
    next_state <= S3; 
    else 
    next_state <= S4;  

    S4 :
    next_state <= S0;
    
    default : next_state <= S0;

    endcase
end

endmodule
